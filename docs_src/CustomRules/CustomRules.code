/* Extend FVRuleField to provide basic rule 
 * field functionality. This class expects the 
 * UI field created to be present at field.ui_field. */
extend(MyCustomFieldClass, FVRule.FVRuleField);

function MyCustomFieldClass(json, validator) {
    var field = this;

    MyCustomFieldClass.superConstructor.call(this, json, validator);
}

/* init is called to validate the content of the rule.
 * Check for parameter values and return any errors. It 
 * is also where you should build an array of checks to 
 * run against the value. */
MyCustomFieldClass.prototype.init = function() {
    var field = this;

    field.prefix = field.validator.get("prefix", BasicVal.string(true), BasicVal.max_length(3));

    field.minimum_id = field.validator.get("minimum_id", BasicVal.integer(true));

    var parameter_error = field.validator.end();

    /* Will return an error upon instantiating the rule if "prefix" 
     * or "minimum_id" are missing or invalid */
    if(parameter_error){
        return parameter_error;
    }

    /* Add the checks that this rule will run against 
     * the value */
    field.checks.push(
        /* Check that the value is a string (and is required) */
        BasicVal.string(field.required),

        /* Check for the specified prefix */
        BasicVal.prefix(field.prefix),
        
        /* Removes the prefix from the value for subsequent checks */
        function(val, emit){
            emit(val.substring(field.prefix.length));
        },
        
        /* Checks that the value after the prefix is 
         * an integer */
        BasicVal.integer({
            parse: true,
            error: {/* provide an error to override the default */
                "error_message": "Non-integer after \""+field.prefix+"\" prefix",
                "error": 1000
            }
        }),
        
        /* Checks that the integer value after the prefix 
         * is above the specified minimum */
        BasicVal.minimum(field.minimum_id, {
            error: {/* provide an error to override the default */
                "error_message": "Id after prefix is less than "+field.minimum_id,
                "error": 1001
            }
        })
    );
}

/* add_editor_params is a static function that adds 
 * fields to the provided editor for the parameters 
 * this rule type has. */
MyCustomFieldClass.add_editor_params = function(editor) {
    var field = this;

    editor.add_field("prefix", new FVTextField("Custom Prefix", {type: "number"}));
    editor.add_field("minimum_id", new FVTextField("Minimum ID", {type: "number"}));
}

/* create_ui should build and return a FieldVal UI-compatible 
 * field for this rule type. */
MyCustomFieldClass.prototype.create_ui = function(use_form){
    var field = this;

    field.ui_field = new FVTextField(field.display_name || field.name, {
        "name": field.name,
        "display_name": field.display_name,
        "type": "text",
        "use_form": use_form
    });

    field.element = field.ui_field.element;
    return field.ui_field;
}

/* Adds this class to FVRule such that it can be referenced 
 * by the specified name within other rules. */
FVRule.add_rule_type({
    "name": "custom_field",
    "display_name": "Custom Field",
    "class": MyCustomFieldClass
});