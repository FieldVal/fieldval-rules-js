{
    "name": "FieldVal Rules",
    "code": [
        {
            "name": "Code",
            "type": "js",
            "runnable": true,
            "demo": true,
            "css_external": "__CURRENT_DOMAIN__/demo_files/minimal.css",
            "js_library": "jquery",
            "js_external": [
                "__CURRENT_DOMAIN__/demo_files/fieldval.js",
                "__CURRENT_DOMAIN__/demo_files/fieldval-ui.js",
                "__CURRENT_DOMAIN__/demo_files/fieldval-rules.js"
            ],
            "runnable_contents": "$(document).ready(function(){\n\n\tvar output = $(\"<pre/>\");\n\tvar display_output = function(value) {\n\t\toutput.text(\"Form output:\\n\" + JSON.stringify(value, null, 4));\n\t};\n\n\tvar rule = new FVRule();\n\tvar rule_error = rule.init({\n\t\t\"type\": \"object\",\n\t\t\"fields\":[\n\t\t\t{\n\t\t\t\t\"name\": \"my_email\",\n\t\t\t\t\"display_name\": \"My Email\",\n\t\t\t\t\"type\": \"email\"\n\t\t\t},{\n\t\t\t\t\"name\": \"my_integer\",\n\t\t\t\t\"display_name\": \"My Integer\",\n\t\t\t\t\"type\": \"number\",\n\t\t\t\t\"integer\": true\n\t\t\t},{\n\t\t\t\t\"name\": \"optional_text\",\n\t\t\t\t\"display_name\": \"Optional Text\",\n\t\t\t\t\"type\": \"text\",\n\t\t\t\t\"required\": false,\n\t\t\t\t\"min_length\": 10,\n\t\t\t\t\"ui_type\": \"textarea\"\n\t\t\t},{\n\t\t\t\t\"name\": \"secret_key\",\n\t\t\t\t\"display_name\": \"Secret Key\",\n\t\t\t\t\"type\": \"text\",\n\t\t\t\t\"min_length\": 8,\n\t\t\t\t\"ui_type\": \"password\"\n\t\t\t}\n\t\t]\n\t});\n\n\tvar form = rule.create_form();\n\t\n\tform.on_submit(function(value){\n\t\trule.validate(value, function(error){\n\t\t\tform.error(error);\n\t\t\tif(error){\n\t\t\t\tdisplay_output(error);\n\t\t\t} else {\n\t\t\t\tdisplay_output(value);\n\t\t\t}\n\t\t});\n\t});\n\n\tform.val({\n\t\t\"my_email\": \"notanemail\",\n\t\t\"my_integer\": \"1234.5\",\n\t\t\"optional_text\": \"This is optional text\",\n\t\t\"secret_key\": \"pswd\"\n\t});\n\n\tform.element.append(\n\t\t$(\"<button/>\").text(\"Submit\")\n\t).appendTo(\"body\");\n\n\toutput.appendTo(\"body\");\n});",
            "contents": "var rule = new FVRule();\nvar rule_error = rule.init({\n\t\"type\": \"object\",\n\t\"fields\":[\n\t\t{\n\t\t\t\"name\": \"my_email\",\n\t\t\t\"display_name\": \"My Email\",\n\t\t\t\"type\": \"email\"\n\t\t},{\n\t\t\t\"name\": \"my_integer\",\n\t\t\t\"display_name\": \"My Integer\",\n\t\t\t\"type\": \"number\",\n\t\t\t\"integer\": true\n\t\t},{\n\t\t\t\"name\": \"optional_text\",\n\t\t\t\"display_name\": \"Optional Text\",\n\t\t\t\"type\": \"text\",\n\t\t\t\"required\": false,\n\t\t\t\"min_length\": 10,\n\t\t\t\"ui_type\": \"textarea\"\n\t\t},{\n\t\t\t\"name\": \"secret_key\",\n\t\t\t\"display_name\": \"Secret Key\",\n\t\t\t\"type\": \"text\",\n\t\t\t\"min_length\": 8,\n\t\t\t\"ui_type\": \"password\"\n\t\t}\n\t]\n});\n\nvar form = rule.create_form();\n\nform.on_submit(function(value){\n\trule.validate(value, function(error){\n\t\tform.error(error);\n\t\tif(error){\n\t\t\tconsole.log(error);\n\t\t} else {\n\t\t\tconsole.log(value);\n\t\t}\n\t});\n});\n\nform.element.append(\n\t$(\"<button/>\").text(\"Submit\")\n).appendTo(\"body\");"
        }
    ],
    "text": "<p>FieldVal Rules allows you to define a rule using JSON which can be used to both validate data and build a UI. FieldVal Rules uses <a href=\"/docs/fieldval/\">FieldVal</a> and <a href=\"/docs/fieldvalui/\">FieldVal UI</a>.</p>\n<p>FieldVal Rules includes a set of standard rule fields such as Text, Number, Choice etc., but you can easily write your own.</p>\n<p>To create a rule, create a <code>new FVRule()</code> and call <code>.init(rule_json)</code> on it with the JSON for your rule.</p>\n<p>The rule JSON is validated and any errors will be returned by <code>.init</code>.</p>\n<p>In a browser, calling <code>.create_form()</code> on the <code>FVRule</code> will return a <a href=\"/docs/fieldvalui/\">FieldVal UI</a> field in a <code>&lt;form/&gt;</code> as shown.</p>\n<p>Then use <code>.validate(data,callback)</code> on the <code>FVRule</code> to validate data against the rule and get a callback with the error, or <code>null</code> if there was no error.</p>\n<p>This error object can then be inserted right back into the form using <code>form.error(error)</code>.</p>\n<h4 id=\"run-the-code-example-to-the-right\">Run the code example to the right</h4>\n<p>Try out FieldVal Rules yourself using CodePen by clicking the &quot;Run on Codepen&quot; button below the example.</p>\n",
    "sections": [
        {
            "name": "Node Usage",
            "code": [
                {
                    "contents": "var FVRule = require('fieldval-rules');\n\nvar rule = new FVRule();\nvar rule_error = rule.init({\n\t\"type\": \"object\",\n\t\"fields\":[\n\t\t{\n\t\t\t\"name\": \"my_email\",\n\t\t\t\"type\": \"email\"\n\t\t},{\n\t\t\t\"name\": \"my_password\",\n\t\t\t\"type\": \"text\",\n\t\t\t\"min_length\": 8,\n\t\t\t\"ui_type\": \"password\"\n\t\t}\n\t]\n});\n\nvar data = {\n\t\"my_email\": \"notanemail\",\n\t\"my_password\": \"pswd\"\n}\n\nrule.validate(data, function(error){\n\t//error will be null if there was no error\n\tconsole.log(error);\n});"
                }
            ],
            "text": "<p>FieldVal Rules works both in the browser as demonstrated above, and as a node package.</p>\n<p>To use FieldVal Rules as a node package, install <code>fieldval-rules</code> using <code>npm</code>:</p>\n<pre><code class=\"lang-bash\">npm install fieldval-rules --save\n</code></pre>\n"
        },
        {
            "name": "Browser Usage",
            "code": [
                {
                    "contents": "<script type=\"text/javascript\" src=\"/PATH_TO/fieldval.js\"></script>\n<script type=\"text/javascript\" src=\"/PATH_TO/fieldval-ui.js\"></script>\n<script type=\"text/javascript\" src=\"/PATH_TO/fieldval-rules.js\"></script>\n<script type=\"text/javascript\">\n\n$(document).ready(function(){\n\tvar rule = new FVRule();\n\tvar rule_error = rule.init({\n\t\t\"type\": \"object\",\n\t\t\"fields\":[\n\t\t\t{\n\t\t\t\t\"name\": \"my_email\",\n\t\t\t\t\"type\": \"email\"\n\t\t\t},{\n\t\t\t\t\"name\": \"my_password\",\n\t\t\t\t\"type\": \"text\",\n\t\t\t\t\"min_length\": 8,\n\t\t\t\t\"ui_type\": \"password\"\n\t\t\t}\n\t\t]\n\t});\n\n\tvar form = rule.create_form();\n\n\tform.on_submit(function(value){\n\t\trule.validate(value, function(error){\n\t\t\tform.error(error);\n\t\t\tif(error){\n\t\t\t\tconsole.log(error)\n\t\t\t} else {\n\t\t\t\t//Do something with the valid data\n\t\t\t\tconsole.log(value);\n\t\t\t}\n\t\t});\n\t})\n\n\tform.element.append(\n\t\t$(\"<button/>\").text(\"Submit\")\n\t).appendTo(\"body\");\n});\n\n</script>"
                }
            ],
            "text": "<p>As FieldVal Rules uses <a href=\"/docs/fieldval/\">FieldVal</a> and <a href=\"/docs/fieldvalui/\">FieldVal UI</a> internally, include a script tag for each library as shown in the example to the right. All three libraries can be installed using Bower or downloaded from the repositories as described below.</p>\n",
            "sections": [
                {
                    "name": "Bower",
                    "text": "<p>FieldVal Rules is available as a <a href=\"http://bower.io\">Bower</a> package. To install <a href=\"/docs/fieldval/\">FieldVal</a>, <a href=\"/docs/fieldvalui/\">FieldVal UI</a> and FieldVal Rules into your existing project, use:</p>\n<pre><code class=\"lang-bash\">bower install fieldval fieldval-ui fieldval-rules --save\n</code></pre>\n"
                },
                {
                    "name": "Manual Install",
                    "text": "<p>To use FieldVal Rules in the browser without a package manager, download <code>fieldval.js</code>, <code>fieldval-ui.js</code> and <code>fieldval-rules.js</code> or their minified versions from their respective repositories:</p>\n<ul>\n<li><a href=\"https://github.com/FieldVal/fieldval-js/\">FieldVal Repository</a>.</li>\n<li><a href=\"https://github.com/FieldVal/fieldval-ui/\">FieldVal UI Repository</a>.</li>\n<li><a href=\"https://github.com/FieldVal/fieldval-rules/\">FieldVal Rules Repository</a>.</li>\n</ul>\n<p>Alternatively, here are the direct links:</p>\n<ul>\n<li><p><a href=\"https://raw.githubusercontent.com/FieldVal/fieldval-js/master/fieldval.js\">fieldval.js</a></p>\n</li>\n<li><p><a href=\"https://raw.githubusercontent.com/FieldVal/fieldval-js/master/fieldval.min.js\">fieldval.min.js</a></p>\n</li>\n<li><p><a href=\"https://raw.githubusercontent.com/FieldVal/fieldval-ui/master/fieldval-ui.js\">fieldval-ui.js</a></p>\n</li>\n<li><p><a href=\"https://raw.githubusercontent.com/FieldVal/fieldval-ui/master/fieldval-ui.min.js\">fieldval-ui.min.js</a></p>\n</li>\n<li><p><a href=\"https://raw.githubusercontent.com/FieldVal/fieldval-rules-js/master/fieldval-rules.js\">fieldval-rules.js</a></p>\n</li>\n<li><p><a href=\"https://raw.githubusercontent.com/FieldVal/fieldval-rules-js/master/fieldval-rules.min.js\">fieldval-rules.min.js</a></p>\n</li>\n</ul>\n"
                }
            ]
        },
        {
            "name": "Examples",
            "text": "",
            "sections": [
                {
                    "name": "Endpoint Validation",
                    "code": [
                        {
                            "contents": "var FVRule = require('fieldval-rules');\n\nvar express = require('express');\nvar bodyParser = require('body-parser');\n\nvar rule = new FVRule();\nvar rule_error = rule.init({\n\t\"type\": \"object\",\n\t\"fields\":[\n\t\t{\n\t\t\t\"name\": \"id\",\n\t\t\t\"type\": \"number\",\n\t\t\t\"integer\": true\n\t\t},{\n\t\t\t\"name\": \"username\",\n\t\t\t\"type\": \"text\"\n\t\t}\n\t]\n});\n\nvar app = express();\napp.use(bodyParser.json());\n\napp.post('/', function (req, res) {\n\trule.validate(req.body, function(error){\n\t\tif (error) {\n\t\t\treturn res.json(error);\n\t\t}\n\n\t\t//Proceed with the code\n\t\tres.json({success:true})\n\t});\n})\n\napp.listen(3000);"
                        }
                    ],
                    "text": "<p>FieldVal Rules can be used to validate an endpoint&#39;s input. If validation fails, a structured error is returned. Otherwise we can proceed.</p>\n<p>Example dependencies:</p>\n<ul>\n<li><a href=\"https://www.npmjs.com/package/express\">express</a></li>\n<li><a href=\"https://www.npmjs.com/package/body-parser\">bodyParser</a></li>\n</ul>\n"
                }
            ]
        },
        {
            "name": "Field Types",
            "code": [
                {
                    "contents": "{\n\t\"name\": \"my_field\",\n\t\"display_name\": \"My Field\",\n\t\"description\": \"This is an example field\",\n\t\"type\": \"text\",\n\t\"required\": true\n}"
                }
            ],
            "text": "<p>FieldVal Rules uses fields that specify their own parameters in order to build validation checks.</p>\n<p>A basic field is shown to the right. It has the following keys:</p>\n<ul>\n<li><code>name</code> - When this field is part of any object, this is the key - optional apart from when the child of an object field.</li>\n<li><code>display_name</code> - The name the field will display when it is used to build UI.</li>\n<li><code>description</code> - A description that is presented to the user in UI - optional.</li>\n<li><code>type</code> - The type of field. The built-in types are described below.</li>\n<li><code>required</code> - Whether or not this field is required. The field will not report an error if <code>required</code> is set to false and the value is not present - optional - defaults to <code>true</code>.</li>\n<li><code>*field-specific-parameters*</code> - Each field type has its own additional parameters. Check the documentation of the field type.</li>\n</ul>\n<p>FieldVal Rules includes a set of rule fields that can be used to validate various field types such as numbers, text and booleans. The built-in rule fields are documented below.</p>\n",
            "sections": [
                {
                    "name": "array",
                    "code": [
                        {
                            "contents": "//wildcard index\n{\n\t\"type\": \"array\",\n\t\"name\": \"my_array\", //optional\n\t\"max_length\": 6, //optional\n\t\"indices\": {\n\t\t\"*\": {\n\t\t\t\"type\": \"number\",\n\t\t\t\"minimum\": 10\n\t\t}\n\t}\n}\n//matches:\n[\n\t1,\n\t3,\n\t4,\n\t6,\n\t8,\n\t9\n]\n\n// simple \"n\" pattern\n{\n\t\"type\": \"array\",\n\t\"indices\": {\n\t\t\"2n\": {\n\t\t\t\"type\": \"text\"\n\t\t},\n\t\t\"2n+1\": {\n\t\t\t\"type\": \"number\"\n\t\t}\n\t}\n}\n//matches:\n[\n\t\"one\",\n\t2,\n\t\"three\",\n\t4,\n\t\"five\",\n\t6\n]\n\n\n// \"n\" pattern with absolute override\n{\n\t\"type\": \"array\",\n\t\"indices\": {\n\t\t\"3n\": {\n\t\t\t\"type\": \"text\"\n\t\t},\n\t\t\"3n+1\": {\n\t\t\t\"type\": \"number\"\n\t\t},\n\t\t\"3n+2\": {\n\t\t\t\"type\": \"number\"\n\t\t},\n\t\t\"1\": {\n\t\t\t\"type\": \"email\"\n\t\t}\n\t}\n}\n//matches:\n[\n\t\"one\",\n\t\"john@example.com\", // index \"1\" \n\t3,\n\t\"four\",\n\t5,\n\t6\n]"
                        }
                    ],
                    "text": "<p>Checks if the value is an array and has the specified indices.</p>\n<ul>\n<li><code>min_length</code> uses BasicVal.min_length to check for a minimum length of the array.</li>\n<li><code>max_length</code> uses BasicVal.max_length to check for a maximum length of the array.</li>\n<li><p><code>indices</code> is an object that defines the rules for array indices using &quot;n&quot; notation or absolute indices.</p>\n<p>  You can use &quot;*&quot; (asterisk) to match all indices unless they are overriden by other patterns.</p>\n<p>  &quot;n&quot; notation allow you to specify repeating patterns, e.g. &quot;2n&quot; matches indices 0,2,4,6,8 etc. and &quot;2n+1&quot; matches indices 1,3,5,7,9.</p>\n<p>  You can also specify absolute indices which will override other patterns.</p>\n</li>\n</ul>\n"
                },
                {
                    "name": "boolean",
                    "code": [
                        {
                            "contents": "{\n\t\"type\": \"boolean\",\n\t\"name\": \"my_boolean\" //optional\n}"
                        }
                    ],
                    "text": "<p>Checks if the value is a boolean.</p>\n"
                },
                {
                    "name": "choice",
                    "code": [
                        {
                            "contents": "{\n\t\"type\": \"choice\",\n\t\"name\": \"my_choice\", //optional\n\t\"choices\": [\n\t\t[1, \"one\"], // \"one\" will be shown in the UI\n\t\t2, // \"2\" will be shown in the UI\n\t\t[3, \"three\"] // \"three\" will be shown in the UI\n\t]\n}"
                        }
                    ],
                    "text": "<p>Checks if the value is one of the specified values.</p>\n<ul>\n<li><code>choices</code> is an array of choices. Each entry in the array can either be a single value or an array of length 2 where the first value is the value that will be accepted and the second value is shown in the UI.</li>\n</ul>\n"
                },
                {
                    "name": "date",
                    "code": [
                        {
                            "contents": "{\n\t\"type\": \"date\",\n\t\"name\": \"my_date\", //optional\n\t\"format\": \"yyyy-MM-dd\"\n}"
                        }
                    ],
                    "text": "<p>Checks if the value complies with the format specified.</p>\n<ul>\n<li><code>format</code> is the format the date must comply with. For format instructions, read the <a href=\"/docs/fieldval/BasicVal/Other%20Checks/date\">BasicVal.date documentation</a>.</li>\n</ul>\n"
                },
                {
                    "name": "email",
                    "code": [
                        {
                            "contents": "{\n\t\"type\": \"email\",\n\t\"name\": \"my_email\" //optional\n}"
                        }
                    ],
                    "text": "<p>Checks if the value is a valid email address.</p>\n"
                },
                {
                    "name": "key_value",
                    "code": [
                        {
                            "contents": "{\n\t\"type\": \"key_value\",\n\t\"name\": \"my_object\", //optional\n\t\"value_field\": {\n\t\t\"type\": \"number\",\n\t\t\"minimum\": 5\n\t}\n}"
                        }
                    ],
                    "text": "<p>Checks if the value is an object and each value complies the specified <code>value_field</code> rule.</p>\n<ul>\n<li><code>value_field</code> is a rule. </li>\n</ul>\n"
                },
                {
                    "name": "number",
                    "code": [
                        {
                            "contents": "{\n\t\"type\": \"number\",\n\t\"name\": \"my_number\", //optional\n\t\"minimum\": 5, //optional\n\t\"maximum\": 10, //optional\n\t\"integer\": true //optional\n}"
                        }
                    ],
                    "text": "<p>Checks if the value is a number and checks any <code>min_length</code> or <code>max_length</code> that is specified.</p>\n<ul>\n<li><code>minimum</code> uses BasicVal.minimum to check for a minimum value.</li>\n<li><code>maximum</code> uses BasicVal.maximum to check for a maximum value.</li>\n<li><code>integer</code> allows you to specify whether or not the value must be an integer. Defaults to <code>false</code>.</li>\n</ul>\n"
                },
                {
                    "name": "object",
                    "code": [
                        {
                            "contents": "//\"object\" field with two inner fields\n{\n\t\"type\": \"object\",\n\t\"name\": \"my_object\", //optional\n\t\"fields\": [\n\t\t{\n\t\t\t\"name\": \"my_nested_number\",\n\t\t\t\"type\": \"number\",\n\t\t\t\"minimum\": 5\n\t\t},{\n\t\t\t\"name\": \"my_nested_email\",\n\t\t\t\"type\": \"email\"\n\t\t}\n\t]\n}\n\n//\"object\" field that will accept any contents\n{\n\t\"type\": \"object\",\n\t\"name\": \"my_object\", //optional\n\t\"any\": true\n}"
                        }
                    ],
                    "text": "<p>Checks if the value is an object and has the specified fields.</p>\n<ul>\n<li><code>fields</code> is an array of rule fields. Every field must have a &quot;name&quot; set.</li>\n<li><code>any</code> is a boolean that if set to <code>true</code> allows the object to have any contents.</li>\n</ul>\n<p><code>any</code> can only be set to <code>true</code> if <code>fields</code> is undefined.</p>\n"
                },
                {
                    "name": "text",
                    "code": [
                        {
                            "contents": "{\n\t\"type\": \"text\",\n\t\"name\": \"my_text\", //optional\n\t\"min_length\": 5, //optional\n\t\"max_length\": 10 //optional\n}"
                        }
                    ],
                    "text": "<p>Checks if the value is a string and checks any <code>min_length</code> or <code>max_length</code> that is specified.</p>\n<ul>\n<li><code>min_length</code> uses BasicVal.min_length to check for a minimum character limit.</li>\n<li><code>max_length</code> uses BasicVal.max_length to check for a maximum character limit.</li>\n<li><code>ui_type</code> allows you to specify the way the field should be displayed when this field is displayed in UI. Valid values are <code>text</code>, <code>textarea</code>, <code>password</code>. The default is <code>text</code>.</li>\n</ul>\n"
                }
            ]
        },
        {
            "name": "Custom Rules",
            "code": [
                {
                    "contents": "/* Extend FVRuleField to provide basic rule \n * field functionality. This class expects the \n * UI field created to be present at field.ui_field. */\nextend(MyCustomFieldClass, FVRule.FVRuleField);\n\nfunction MyCustomFieldClass(json, validator) {\n    var field = this;\n\n    MyCustomFieldClass.superConstructor.call(this, json, validator);\n}\n\n/* init is called to validate the content of the rule.\n * Check for parameter values and return any errors. It \n * is also where you should build an array of checks to \n * run against the value. */\nMyCustomFieldClass.prototype.init = function() {\n    var field = this;\n\n    field.prefix = field.validator.get(\"prefix\", BasicVal.string(true), BasicVal.max_length(3));\n\n    field.minimum_id = field.validator.get(\"minimum_id\", BasicVal.integer(true));\n\n    var parameter_error = field.validator.end();\n\n    /* Will return an error upon instantiating the rule if \"prefix\" \n     * or \"minimum_id\" are missing or invalid */\n    if(parameter_error){\n        return parameter_error;\n    }\n\n    /* Add the checks that this rule will run against \n     * the value */\n    field.checks.push(\n        /* Check that the value is a string (and is required) */\n        BasicVal.string(field.required),\n\n        /* Check for the specified prefix */\n        BasicVal.prefix(field.prefix),\n        \n        /* Removes the prefix from the value for subsequent checks */\n        function(val, emit){\n            emit(val.substring(field.prefix.length));\n        },\n        \n        /* Checks that the value after the prefix is \n         * an integer */\n        BasicVal.integer({\n            parse: true,\n            error: {/* provide an error to override the default */\n                \"error_message\": \"Non-integer after \\\"\"+field.prefix+\"\\\" prefix\",\n                \"error\": 1000\n            }\n        }),\n        \n        /* Checks that the integer value after the prefix \n         * is above the specified minimum */\n        BasicVal.minimum(field.minimum_id, {\n            error: {/* provide an error to override the default */\n                \"error_message\": \"Id after prefix is less than \"+field.minimum_id,\n                \"error\": 1001\n            }\n        })\n    );\n}\n\n/* add_editor_params is a static function that adds \n * fields to the provided editor for the parameters \n * this rule type has. */\nMyCustomFieldClass.add_editor_params = function(editor) {\n    var field = this;\n\n    editor.add_field(\"prefix\", new FVTextField(\"Custom Prefix\", {type: \"number\"}));\n    editor.add_field(\"minimum_id\", new FVTextField(\"Minimum ID\", {type: \"number\"}));\n}\n\n/* create_ui should build and return a FieldVal UI-compatible \n * field for this rule type. */\nMyCustomFieldClass.prototype.create_ui = function(use_form){\n    var field = this;\n\n    field.ui_field = new FVTextField(field.display_name || field.name, {\n        \"name\": field.name,\n        \"display_name\": field.display_name,\n        \"type\": \"text\",\n        \"use_form\": use_form\n    });\n\n    field.element = field.ui_field.element;\n    return field.ui_field;\n}\n\n/* Adds this class to FVRule such that it can be referenced \n * by the specified name within other rules. */\nFVRule.add_rule_type({\n    \"name\": \"custom_field\",\n    \"display_name\": \"Custom Field\",\n    \"class\": MyCustomFieldClass\n});"
                }
            ],
            "text": "<p>You can extend FieldVal Rules with additional types by adding classes to FVRule with <code>add_rule_type</code>.</p>\n<pre><code class=\"lang-javascript\">FVRuleField.add_rule_type({\n    &quot;name&quot;: &quot;my_custom_field&quot;,\n    &quot;display_name&quot;: &quot;My Custom Field&quot;,\n    &quot;class&quot;: MyCustomFieldClass\n});\n</code></pre>\n<p>The easiest way to write a custom field is to <code>extend</code> <code>FVRule.FVRuleField</code> and override certain functions.</p>\n<p>The class provided in this example creates an FVTextField UI field and validates a string with a format such as &quot;abc1000&quot; where &quot;abc&quot; is provided as the <code>&quot;prefix&quot;</code> parameter and a minimum integer value such as <code>1000</code> is provided as the &quot;minimum_id&quot; parameter.</p>\n"
        }
    ]
}